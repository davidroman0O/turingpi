# Use an official Go runtime as a parent image for building
FROM golang:1.23-bookworm AS builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Install prerequisites for the prepare command
# Need add-apt-repository for deadsnakes if using older base image
# RUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:deadsnakes/ppa
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo \
    kpartx \
    xz-utils \
    coreutils \
    util-linux \
    mount \
    ca-certificates \
 && rm -rf /var/lib/apt/lists/*

# Pre-copy go.mod and go.sum files to leverage Docker cache
COPY go.mod go.sum ./
RUN go mod download

# Copy the source code into the container
COPY . .

# Build the Go app
# Pass CGO_ENABLED=0 if not using cgo, for static linking
# Pass GOOS=linux for cross-compilation if needed (though building in linux container is fine)
RUN CGO_ENABLED=0 go build -v -o /turingpi .


# Use a minimal base image for the final stage
FROM debian:bookworm-slim

LABEL maintainer="Your Name <you@example.com>"
LABEL description="Environment to run turingpi prepare command"

# Install runtime dependencies (kpartx, xz, sudo, mount might still be needed by the executed commands)
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo \
    kpartx \
    xz-utils \
    util-linux \
    mount \
    ca-certificates \
 && rm -rf /var/lib/apt/lists/*

# Create a non-root user and grant sudo without password
RUN useradd -m appuser --uid 1000 && \
    echo "appuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Copy the pre-built binary and any other necessary assets from the builder stage
COPY --from=builder /turingpi /usr/local/bin/turingpi

# Create directories for image mounting and output, owned by appuser
RUN mkdir /images /prepared-images /app && chown appuser:appuser /images /prepared-images /app

# Switch to the non-root user
USER appuser
WORKDIR /app

# Define the entrypoint or default command (optional)
# ENTRYPOINT ["sudo", "/usr/local/bin/turingpi", "prepare"]

# Example usage when running the container:
# 1. Build the image:
#    docker build -t turingpi-prepare -f Dockerfile.prepare .
#
# 2. Run the prepare command:
#    docker run --rm -it --privileged \
#      -v "/path/to/your/iso/images:/images:ro" \
#      -v "$(pwd)/prepared-images:/prepared-images:rw" \
#      turingpi-prepare \
#      sudo /usr/local/bin/turingpi prepare \
#        --source /images/ubuntu-22.04.3-preinstalled-server-arm64-turing-rk1_v1.33.img.xz \
#        --node 1 \
#        --ip "192.168.1.101/24" \
#        --gateway "192.168.1.1" \
#        --dns "1.1.1.1,8.8.8.8" \
#        --cache-dir /prepared-images

# Note: --privileged is often needed for kpartx/mount operations within Docker.
# Alternatively, explore finer-grained capabilities like --cap-add SYS_ADMIN and device mapping.
# Using a non-root user with specific sudo privileges is a good practice. 